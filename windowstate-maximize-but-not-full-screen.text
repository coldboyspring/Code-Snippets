// https://social.msdn.microsoft.com/Forums/vstudio/en-US/e77c3b58-41f6-4534-8a92-be0f8287b734/windowstate-maximize-but-not-full-screen?forum=wpf
// This code calculates the working area for a WPF window and is DPI independent

public partial class Window1 : System.Windows.Window

{

    // Nearest monitor to window

    const int MONITOR_DEFAULTTONEAREST = 2;

 

    // To get a handle to the specified monitor

    [DllImport("user32.dll")]

    static extern IntPtr MonitorFromWindow(IntPtr hwnd, int dwFlags);

 

    // Rectangle (used by MONITORINFOEX)

    [StructLayout(LayoutKind.Sequential)]

    public struct RECT

    {

        public int Left;

        public int Top;

        public int Right;

        public int Bottom;

    }

 

    // Monitor information (used by GetMonitorInfo())

    [StructLayout(LayoutKind.Sequential)]

    public class MONITORINFOEX

    {

        public int cbSize;

        public RECT rcMonitor; // Total area

        public RECT rcWork; // Working area

        public int dwFlags;

        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 0x20)]

        public char[] szDevice;

    }

 

    // To get the working area of the specified monitor

    [DllImport("user32.dll")]

    public static extern bool GetMonitorInfo(HandleRef hmonitor, [In, Out] MONITORINFOEX monitorInfo);

 

    public Window1()

    {

        InitializeComponent();

 

        // Can only calculate device independent working area once

        // the window has a handle that we can use

        this.SourceInitialized += new EventHandler(Window1_SourceInitialized);

    }

 

    void Window1_SourceInitialized(object sender, EventArgs e)

    {

        // Make window borderless

        this.WindowStyle = WindowStyle.None;

        this.ResizeMode = ResizeMode.NoResize;

 

        // Get handle for nearest monitor to this window

        WindowInteropHelper wih = new WindowInteropHelper(this);

        IntPtr hMonitor = MonitorFromWindow(wih.Handle, MONITOR_DEFAULTTONEAREST);

 

        // Get monitor info

        MONITORINFOEX monitorInfo = new MONITORINFOEX();

        monitorInfo.cbSize = Marshal.SizeOf(monitorInfo);

        GetMonitorInfo(new HandleRef(this, hMonitor), monitorInfo);

 

        // Create working area dimensions, converted to DPI-independent values

        HwndSource source = HwndSource.FromHwnd(wih.Handle);

        if (source == null) return; // Should never be null

        if (source.CompositionTarget == null) return; // Should never be null

        Matrix matrix = source.CompositionTarget.TransformFromDevice;

        RECT workingArea = monitorInfo.rcWork;

        Point dpiIndependentSize =

            matrix.Transform(

            new Point(

                workingArea.Right - workingArea.Left,

                workingArea.Bottom - workingArea.Top));

 

        // Maximize the window to the device-independent working area ie

        // the area without the taskbar.

        // NOTE - window state must be set to Maximized as this adds certain

        // maximized behaviors eg you can't move a window while it is maximized,

        // such as by calling Window.DragMove

        this.Top = 0;

        this.Left = 0;

        this.MaxWidth = dpiIndependentSize.X;

        this.MaxHeight = dpiIndependentSize.Y;

        this.WindowState = WindowState.Maximized;

    }

}
